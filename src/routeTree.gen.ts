/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authLayoutImport } from './routes/(auth)/_layout'

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')()
const IndexLazyImport = createFileRoute('/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const authRegisterLazyImport = createFileRoute('/(auth)/register')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()
const appStatsLazyImport = createFileRoute('/(app)/stats')()
const appProfileLazyImport = createFileRoute('/(app)/profile')()
const appAssetsLazyImport = createFileRoute('/(app)/assets')()
const appAboutLazyImport = createFileRoute('/(app)/about')()

// Create/Update Routes

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const authRegisterLazyRoute = authRegisterLazyImport
  .update({
    id: '/register',
    path: '/register',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/register.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => authRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

const appStatsLazyRoute = appStatsLazyImport
  .update({
    id: '/(app)/stats',
    path: '/stats',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/stats.lazy').then((d) => d.Route))

const appProfileLazyRoute = appProfileLazyImport
  .update({
    id: '/(app)/profile',
    path: '/profile',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/profile.lazy').then((d) => d.Route))

const appAssetsLazyRoute = appAssetsLazyImport
  .update({
    id: '/(app)/assets',
    path: '/assets',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/assets.lazy').then((d) => d.Route))

const appAboutLazyRoute = appAboutLazyImport
  .update({
    id: '/(app)/about',
    path: '/about',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/about.lazy').then((d) => d.Route))

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/assets': {
      id: '/(app)/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof appAssetsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/stats': {
      id: '/(app)/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof appStatsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof authImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterLazyImport
      parentRoute: typeof authImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRoute
  authLoginLazyRoute: typeof authLoginLazyRoute
  authRegisterLazyRoute: typeof authRegisterLazyRoute
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRoute,
  authLoginLazyRoute: authLoginLazyRoute,
  authRegisterLazyRoute: authRegisterLazyRoute,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authLayoutRoute
  '/about': typeof appAboutLazyRoute
  '/assets': typeof appAssetsLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/stats': typeof appStatsLazyRoute
  '/login': typeof authLoginLazyRoute
  '/register': typeof authRegisterLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof authLayoutRoute
  '/about': typeof appAboutLazyRoute
  '/assets': typeof appAssetsLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/stats': typeof appStatsLazyRoute
  '/login': typeof authLoginLazyRoute
  '/register': typeof authRegisterLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRoute
  '/(app)/about': typeof appAboutLazyRoute
  '/(app)/assets': typeof appAssetsLazyRoute
  '/(app)/profile': typeof appProfileLazyRoute
  '/(app)/stats': typeof appStatsLazyRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/register': typeof authRegisterLazyRoute
  '/profile/': typeof ProfileIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/assets'
    | '/profile'
    | '/stats'
    | '/login'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/assets'
    | '/profile'
    | '/stats'
    | '/login'
    | '/register'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/(app)/about'
    | '/(app)/assets'
    | '/(app)/profile'
    | '/(app)/stats'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  authRoute: typeof authRouteWithChildren
  appAboutLazyRoute: typeof appAboutLazyRoute
  appAssetsLazyRoute: typeof appAssetsLazyRoute
  appProfileLazyRoute: typeof appProfileLazyRoute
  appStatsLazyRoute: typeof appStatsLazyRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  authRoute: authRouteWithChildren,
  appAboutLazyRoute: appAboutLazyRoute,
  appAssetsLazyRoute: appAssetsLazyRoute,
  appProfileLazyRoute: appProfileLazyRoute,
  appStatsLazyRoute: appStatsLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(app)/about",
        "/(app)/assets",
        "/(app)/profile",
        "/(app)/stats",
        "/profile/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_layout",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(auth)/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/(auth)"
    },
    "/(app)/about": {
      "filePath": "(app)/about.lazy.tsx"
    },
    "/(app)/assets": {
      "filePath": "(app)/assets.lazy.tsx"
    },
    "/(app)/profile": {
      "filePath": "(app)/profile.lazy.tsx"
    },
    "/(app)/stats": {
      "filePath": "(app)/stats.lazy.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.lazy.tsx",
      "parent": "/(auth)"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
