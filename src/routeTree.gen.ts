/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const profileSettingsLazyImport = createFileRoute('/(profile)/settings')()
const profileNotificationsLazyImport = createFileRoute(
  '/(profile)/notifications',
)()
const authRegisterLazyImport = createFileRoute('/(auth)/register')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()
const appStatsLazyImport = createFileRoute('/(app)/stats')()
const appOverviewLazyImport = createFileRoute('/(app)/overview')()
const appAssetsLazyImport = createFileRoute('/(app)/assets')()
const appAboutLazyImport = createFileRoute('/(app)/about')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const profileSettingsLazyRoute = profileSettingsLazyImport
  .update({
    id: '/(profile)/settings',
    path: '/settings',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(profile)/settings.lazy').then((d) => d.Route))

const profileNotificationsLazyRoute = profileNotificationsLazyImport
  .update({
    id: '/(profile)/notifications',
    path: '/notifications',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(profile)/notifications.lazy').then((d) => d.Route),
  )

const authRegisterLazyRoute = authRegisterLazyImport
  .update({
    id: '/(auth)/register',
    path: '/register',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/register.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

const appStatsLazyRoute = appStatsLazyImport
  .update({
    id: '/(app)/stats',
    path: '/stats',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/stats.lazy').then((d) => d.Route))

const appOverviewLazyRoute = appOverviewLazyImport
  .update({
    id: '/(app)/overview',
    path: '/overview',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/overview.lazy').then((d) => d.Route))

const appAssetsLazyRoute = appAssetsLazyImport
  .update({
    id: '/(app)/assets',
    path: '/assets',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/assets.lazy').then((d) => d.Route))

const appAboutLazyRoute = appAboutLazyImport
  .update({
    id: '/(app)/about',
    path: '/about',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/about.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/assets': {
      id: '/(app)/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof appAssetsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/overview': {
      id: '/(app)/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof appOverviewLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/stats': {
      id: '/(app)/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof appStatsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/(profile)/notifications': {
      id: '/(profile)/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof profileNotificationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/(profile)/settings': {
      id: '/(profile)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof profileSettingsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof appAboutLazyRoute
  '/assets': typeof appAssetsLazyRoute
  '/overview': typeof appOverviewLazyRoute
  '/stats': typeof appStatsLazyRoute
  '/login': typeof authLoginLazyRoute
  '/register': typeof authRegisterLazyRoute
  '/notifications': typeof profileNotificationsLazyRoute
  '/settings': typeof profileSettingsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof appAboutLazyRoute
  '/assets': typeof appAssetsLazyRoute
  '/overview': typeof appOverviewLazyRoute
  '/stats': typeof appStatsLazyRoute
  '/login': typeof authLoginLazyRoute
  '/register': typeof authRegisterLazyRoute
  '/notifications': typeof profileNotificationsLazyRoute
  '/settings': typeof profileSettingsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)/about': typeof appAboutLazyRoute
  '/(app)/assets': typeof appAssetsLazyRoute
  '/(app)/overview': typeof appOverviewLazyRoute
  '/(app)/stats': typeof appStatsLazyRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/register': typeof authRegisterLazyRoute
  '/(profile)/notifications': typeof profileNotificationsLazyRoute
  '/(profile)/settings': typeof profileSettingsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/assets'
    | '/overview'
    | '/stats'
    | '/login'
    | '/register'
    | '/notifications'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/assets'
    | '/overview'
    | '/stats'
    | '/login'
    | '/register'
    | '/notifications'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/(app)/about'
    | '/(app)/assets'
    | '/(app)/overview'
    | '/(app)/stats'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(profile)/notifications'
    | '/(profile)/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appAboutLazyRoute: typeof appAboutLazyRoute
  appAssetsLazyRoute: typeof appAssetsLazyRoute
  appOverviewLazyRoute: typeof appOverviewLazyRoute
  appStatsLazyRoute: typeof appStatsLazyRoute
  authLoginLazyRoute: typeof authLoginLazyRoute
  authRegisterLazyRoute: typeof authRegisterLazyRoute
  profileNotificationsLazyRoute: typeof profileNotificationsLazyRoute
  profileSettingsLazyRoute: typeof profileSettingsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appAboutLazyRoute: appAboutLazyRoute,
  appAssetsLazyRoute: appAssetsLazyRoute,
  appOverviewLazyRoute: appOverviewLazyRoute,
  appStatsLazyRoute: appStatsLazyRoute,
  authLoginLazyRoute: authLoginLazyRoute,
  authRegisterLazyRoute: authRegisterLazyRoute,
  profileNotificationsLazyRoute: profileNotificationsLazyRoute,
  profileSettingsLazyRoute: profileSettingsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)/about",
        "/(app)/assets",
        "/(app)/overview",
        "/(app)/stats",
        "/(auth)/login",
        "/(auth)/register",
        "/(profile)/notifications",
        "/(profile)/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)/about": {
      "filePath": "(app)/about.lazy.tsx"
    },
    "/(app)/assets": {
      "filePath": "(app)/assets.lazy.tsx"
    },
    "/(app)/overview": {
      "filePath": "(app)/overview.lazy.tsx"
    },
    "/(app)/stats": {
      "filePath": "(app)/stats.lazy.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.lazy.tsx"
    },
    "/(profile)/notifications": {
      "filePath": "(profile)/notifications.lazy.tsx"
    },
    "/(profile)/settings": {
      "filePath": "(profile)/settings.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
